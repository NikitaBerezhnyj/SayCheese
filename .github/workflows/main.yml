name: Build and Release SayCheese

permissions:
  contents: write
  packages: write

on:
  push:
    branches:
      - prod
  pull_request:
    branches:
      - prod

jobs:
  build-android:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17

      - name: Decode and save keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > app/saycheese-release.jks
          echo "storeFile=saycheese-release.jks" > app/key.properties
          echo "storePassword=${{ secrets.STORE_PASSWORD }}" >> app/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> app/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> app/key.properties

      - name: Verify keystore and key properties
        run: |
          if [[ -s app/key.properties ]]; then
            echo "key.properties exists and is not empty"
          else
            echo "key.properties missing or empty"
            ls -la app || true
            exit 1
          fi

          if [[ -f app/saycheese-release.jks ]]; then
            echo "keystore found: app/saycheese-release.jks (size: $(stat -c%s app/saycheese-release.jks) bytes)"
          else
            echo "keystore not found at app/saycheese-release.jks"
            ls -la app || true
            exit 1
          fi

          if grep -q '^storeFile=' app/key.properties; then
            echo "key.properties contains storeFile"
          else
            echo "key.properties does not contain storeFile"
            exit 1
          fi

          STOREFILE="$(grep '^storeFile=' app/key.properties | cut -d'=' -f2 || true)"
          if [[ -n "$STOREFILE" && -f "app/$STOREFILE" ]]; then
            echo "storeFile references existing file: $STOREFILE"
          else
            echo "storeFile points to missing file: $STOREFILE"
            ls -la app || true
            exit 1
          fi

      - name: Build signed APK & AAB
        run: ./gradlew --no-daemon clean assembleRelease bundleRelease

      - name: Extract version name
        id: version
        run: |
          VERSION=$(./gradlew -q printVersion)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Prepare artifacts
        run: |
          mkdir -p dist
          VERSION=${{ steps.version.outputs.version }}

          APK_PATH="app/build/outputs/apk/release/app-release.apk"
          AAB_PATH="app/build/outputs/bundle/release/app-release.aab"

          if [ -f "$APK_PATH" ]; then
            cp "$APK_PATH" dist/SayCheese-${VERSION}.apk
          else
            echo "APK not found!"
          fi

          if [ -f "$AAB_PATH" ]; then
            cp "$AAB_PATH" dist/SayCheese-${VERSION}.aab
          else
            echo "AAB not found!"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: saycheese-build
          path: dist/*

  release:
    runs-on: ubuntu-latest
    needs: build-android

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: saycheese-build
          path: ./artifacts

      - name: Get version from Gradle
        id: version
        run: |
          VERSION=$(./gradlew -q printVersion)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Auto-increment version if release exists
        id: increment
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.version.outputs.version }}
          COUNT=0
          NEW_VERSION=$VERSION

          while gh release view "$NEW_VERSION" >/dev/null 2>&1; do
            COUNT=$((COUNT+1))
            NEW_VERSION="${VERSION}-${COUNT}"
          done

          echo "final_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Publish GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.increment.outputs.final_version }}
          echo "Creating release v$VERSION"

          gh release create "$VERSION" \
            --title "SayCheese v$VERSION" \
            --notes "Automated release build"

          gh release upload "$VERSION" ./artifacts/* --clobber
