name: Build and Release SayCheese

permissions:
  contents: write
  packages: write

on:
  push:
    branches:
      - prod
  pull_request:
    branches:
      - prod

jobs:
  build-android:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: Get dependencies
        run: ./gradlew --no-daemon assembleRelease

      - name: Extract version from build.gradle
        id: get_version
        run: |
          VERSION=$(grep 'versionName' app/build.gradle | head -n 1 | grep -oE '"[^"]+"' | tr -d '"')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Prepare artifacts
        run: |
          mkdir -p dist
          VERSION=${{ steps.get_version.outputs.version }}
          cp app/build/outputs/apk/release/app-release.apk dist/SayCheese-${VERSION}.apk
          cp app/build/outputs/bundle/release/app-release.aab dist/SayCheese-${VERSION}.aab || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: saycheese-build
          path: dist/*

  release:
    runs-on: ubuntu-latest
    needs: build-android

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: saycheese-build
          path: ./artifacts

      - name: Get version
        id: get_version
        run: |
          VERSION=$(grep 'versionName' app/build.gradle | head -n 1 | grep -oE '"[^"]+"' | tr -d '"')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Auto-increment version if release exists
        id: increment_version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          COUNT=0
          NEW_VERSION=$VERSION

          while gh release view "$NEW_VERSION" >/dev/null 2>&1; do
            echo "Version $NEW_VERSION exists, incrementing..."
            COUNT=$((COUNT+1))
            NEW_VERSION="${VERSION}-${COUNT}"
          done
          echo "final_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create or update GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.increment_version.outputs.final_version }}

          gh release create "$VERSION" \
            --title "SayCheese v$VERSION" \
            --notes "Automated release build" || true

          for file in ./artifacts/*; do
            gh release upload "$VERSION" "$file" --clobber
          done
